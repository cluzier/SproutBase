@page "/"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JS

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f0fff4;
        color: #2f4f4f;
        margin: 20px;
    }

    h3 {
        color: #2e8b57;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .table th, .table td {
        border: 1px solid #e0e0e0;
        padding: 10px;
    }

    .table th {
        background-color: #d0f0c0;
    }

    input[type="text"], input[type="date"] {
        padding: 6px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 100%;
    }

    .tags span {
        display: inline-block;
        background-color: #b2fab4;
        color: #2e7d32;
        padding: 3px 8px;
        margin: 2px;
        border-radius: 12px;
        font-size: 0.85em;
    }

    .form-container {
        margin-top: 20px;
        padding: 12px;
        border: 1px solid #c8e6c9;
        border-radius: 6px;
        background-color: #e8f5e9;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
    }

    /* on medium screens, stack in two columns */
    @@media (max-width: 768px) {
        .form-group {
            flex: 1 1 100%;
        }

        .form-row {
            gap: 12px;
        }
    }

    /* on small screens, stack in a single column with full width */
    @@media (max-width: 480px) {
        .form-group {
            flex: 1 1 100%;
        }

        .form-row {
            flex-direction: column;
            gap: 10px;
        }
    }

    .form-group {
        flex: 1;
        min-width: 220px;
    }

    .form-group:last-child {
        margin-bottom: 10px;
    }

    button {
        padding: 6px 12px;
        background-color: #32cd32;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    button[disabled] {
        background-color: #ccc;
        cursor: not-allowed;
    }

    label {
        display: block;
        font-weight: bold;
        margin-top: 8px;
    }

    .validation-message {
        color: red;
        font-size: 0.85em;
    }

    .search-filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        margin: 16px 0;
        width: fit-content;

        > input {
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    }

    .search-filter-row input[type="text"],
    .search-filter-row select {
        flex: 1;
        min-width: 200px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1rem;
        background-color: #ffffff;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }

    .tag-suggestions {
        list-style: none;
        padding-left: 0;
        margin-top: 4px;
        background: #ffffff;
        border: 1px solid #c8e6c9;
        border-radius: 6px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
        max-height: 150px;
        overflow-y: auto;
        z-index: 1000;
        position: absolute;
        width: fit-content;
    }

    .tag-suggestions li {
        padding: 8px 12px;
        cursor: pointer;
        font-size: 0.95rem;
        transition: background 0.2s ease;
    }

    .tag-suggestions li:hover {
        background-color: #e0f2f1;
    }

    .tag-chip {
        display: inline-flex;
        align-items: center;
        background-color: #b2fab4;
        color: #2e7d32;
        padding: 3px 8px;
        margin: 2px;
        border-radius: 12px;
        font-size: 0.85em;
    }

    .tag-close {
        background: none;
        border: none;
        color: #2e7d32;
        font-weight: bold;
        margin-left: 6px;
        cursor: pointer;
        font-size: 1em;
    }
    
    .tag-close:hover {
        color: #d32f2f;
    }

    @@media (max-width: 768px) {
        .table {
            /* display: block; */
            /* overflow-x: auto; */
            white-space: nowrap;
            border-radius: 8px;
        }
    }

    @@media (max-width: 645px) {
        .table thead {
            display: none;
        }

        .table, .table tbody, .table tr, .table td {
            display: block;
            width: 100%;
        }

        .table tr {
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            background-color: #fff;
        }

        .table td {
            text-align: right;
            padding-left: 50%;
            position: relative;
        }

        .table td::before {
            content: attr(data-label);
            position: absolute;
            left: 10px;
            width: 45%;
            padding-left: 15px;
            font-weight: bold;
            text-align: left;
            color: #333;
        }
    }
</style>

<h3>🌿 Plant Tracker</h3>

@if (plants == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="search-filter-row">
        <button @onclick="ShowAddPlant">Add Plant</button>
        <input placeholder="Search by name..." @bind="searchTerm" @bind:event="oninput" />
        <select @bind="selectedTag">
            <option value="">Filter by tag</option>
            @foreach (var tag in AllTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Species</th>
                <th>Last Watered</th>
                <th>Tags</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plant in FilteredPlants)
            {
                <tr style="@GetWateringStyle(plant)">
                    <td data-label="Name">@plant.Name</td>
                    <td data-label="Species">@plant.Species</td>
                    <td data-label="Last Watered">@plant.LastWatered.ToShortDateString()</td>
                    <td data-label="Tags" class="tags">
                        @foreach (var tag in plant.TagList)
                        {
                            <span>@tag</span>
                        }
                    </td>
                    <td data-label="Actions">
                        <button @onclick="() => EditPlant(plant)">Edit</button>
                        <button @onclick="() => ConfirmDelete(plant)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showForm)
{
    <div class="form-container">
        <EditForm EditContext="editContext" OnValidSubmit="SavePlant">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-row">
                <div class="form-group">
                    <label>Name:</label>
                    <InputText @bind-Value="editPlant.Name" />
                    <ValidationMessage For="@(() => editPlant.Name)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Species:</label>
                    <InputText @bind-Value="editPlant.Species" />
                    <ValidationMessage For="@(() => editPlant.Species)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Last Watered:</label>
                    <InputDate @bind-Value="editPlant.LastWatered" />
                    <ValidationMessage For="@(() => editPlant.LastWatered)" class="validation-message" />
                </div>

                <div id="tag-input-container" class="form-group" style="flex: 1 1 100%; position: relative;">
                    <label>Tags (comma-separated):</label>
                    <InputText @bind-Value="editPlant.Tags"
                               oninput="@((ChangeEventArgs e) => OnTagsChanged(e.Value?.ToString() ?? ""))" />

                    <div class="tags">
                        @foreach (var tag in editPlant.TagList)
                        {
                            <span class="tag-chip">
                                @tag
                                <button type="button" @onclick="() => RemoveTag(tag)" class="tag-close">×</button>
                            </span>
                        }
                    </div>

                    @if (tagSuggestions.Any())
                    {
                        <ul class="tag-suggestions">
                            @foreach (var suggestion in tagSuggestions)
                            {
                                <li @onclick="@(() => AddTagSuggestion(suggestion))">
                                    @suggestion
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <button type="submit" disabled="@(!formIsValid)">Save</button>
            <button type="button" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    </div>
}

@if (showConfirmDialog)
{
    <div style="background-color:#fffbe6; border:1px solid #ccc; padding:20px; margin-top:10px; border-radius:8px;">
        <p>Are you sure you want to delete <strong>@plantToDelete?.Name</strong>?</p>
        <button @onclick="PerformDelete">Confirm</button>
        <button @onclick="() => showConfirmDialog = false">Cancel</button>
    </div>
}

@code {
    private List<ValidatedPlant>? plants;
    private ValidatedPlant editPlant = new();
    private EditContext? editContext;
    private bool showForm = false;
    private string searchTerm = "";
    private string selectedTag = "";
    private bool formIsValid = false;
    private List<string> tagSuggestions = new();
    private DotNetObjectReference<Index>? _dotNetRef;
    private ElementReference tagInputContainer;
    private ValidatedPlant? plantToDelete;
    private bool showConfirmDialog = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlants();
    }

    private async Task LoadPlants()
    {
        plants = await Http.GetFromJsonAsync<List<ValidatedPlant>>("api/plants");
    }

    private void ShowAddPlant()
    {
        editPlant = new ValidatedPlant { LastWatered = DateTime.Today };
        editContext = new EditContext(editPlant);
        editContext.OnFieldChanged += (_, __) => formIsValid = editContext.Validate();
        formIsValid = false;
        showForm = true;
    }

    private void EditPlant(ValidatedPlant plant)
    {
        editPlant = new ValidatedPlant
        {
            Id = plant.Id,
            Name = plant.Name,
            Species = plant.Species,
            LastWatered = plant.LastWatered,
            Tags = plant.Tags
        };

        editContext = new EditContext(editPlant);
        editContext.OnFieldChanged += (_, __) => formIsValid = editContext.Validate();

        // Trigger validation immediately for pre-filled fields
        formIsValid = editContext.Validate();

        showForm = true;
    }

    private async Task SavePlant()
    {
        if (editPlant.Id == 0)
        {
            await Http.PostAsJsonAsync("api/plants", editPlant);
        }
        else
        {
            await Http.PutAsJsonAsync($"api/plants/{editPlant.Id}", editPlant);
        }
        showForm = false;
        await LoadPlants();
    }

    private void ConfirmDelete(ValidatedPlant plant)
    {
        plantToDelete = plant;
        showConfirmDialog = true;
    }

    private async Task PerformDelete()
    {
        if (plantToDelete != null)
        {
            await Http.DeleteAsync($"api/plants/{plantToDelete.Id}");
            await LoadPlants();
        }
        showConfirmDialog = false;
        plantToDelete = null;
    }

    private void CancelEdit()
    {
        showForm = false;
    }

    private IEnumerable<ValidatedPlant> FilteredPlants =>
        (plants ?? Enumerable.Empty<ValidatedPlant>())
            .Where(p =>
                (string.IsNullOrWhiteSpace(searchTerm) || p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(selectedTag) || p.TagList.Contains(selectedTag))
            );

    private IEnumerable<string> AllTags =>
        plants?
            .SelectMany(p => p.TagList)
            .Distinct()
            .OrderBy(tag => tag)
        ?? Enumerable.Empty<string>();

    public class ValidatedPlant
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Species is required")]
        public string? Species { get; set; }

        [Required]
        public DateTime LastWatered { get; set; }

        public string Tags { get; set; } = string.Empty;

        public IEnumerable<string> TagList =>
            string.IsNullOrWhiteSpace(Tags)
                ? Enumerable.Empty<string>()
                : Tags.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
    }

    private void OnTagsChanged(string input)
    {
        editPlant.Tags = input;

        // Get last token after comma
        var partial = input.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).LastOrDefault() ?? "";

        tagSuggestions = AllTags
            .Where(tag => tag.StartsWith(partial, StringComparison.OrdinalIgnoreCase) &&
                          !editPlant.TagList.Contains(tag))
            .Take(5)
            .ToList();
    }

    private void AddTagSuggestion(string suggestion)
    {
        var current = editPlant.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();

        if (current.Count > 0)
            current[current.Count - 1] = suggestion;
        else
            current.Add(suggestion);

        editPlant.Tags = string.Join(", ", current);
        tagSuggestions.Clear();
    }

    [JSInvokable]
    public void ClearTagSuggestions()
    {
        tagSuggestions.Clear();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerOutsideClick", _dotNetRef, "tag-input-container");
        }
    }

    private void RemoveTag(string tagToRemove)
    {
        var tags = editPlant.TagList.Where(tag => !string.Equals(tag, tagToRemove, StringComparison.OrdinalIgnoreCase)).ToList();
        editPlant.Tags = string.Join(", ", tags);
    }

    private string GetWateringStyle(ValidatedPlant plant)
    {
        var daysSince = (DateTime.Today - plant.LastWatered.Date).TotalDays;

        if (daysSince > 7)
            return "background-color:#ffebee; color:#b71c1c;"; // Red for overdue
        if (daysSince == 0)
            return "background-color:#fff9c4;"; // Yellow for today

        return "";
    }
}
